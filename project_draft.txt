Slave-lotniskowiec:
	tablica miejsc na samoloty,
	zmienna pas zajęty/wolny (?)
	
	
	!! TO DO !! zależnie od zmian w slave-samolot, tutaj aktualizować kolejne wiadomości itp.
	cały (niezajęty) czas nasłuchuje na wszystkie inne wiadomości:
		Jeśli MSG_LANDING, to:
			Jeśli wolne miejsce w hangarze i wolny pas:
				blokuje pas startowy
				odsyła MSG_LANDING_PERMIT
			Jeśli nie:
				odsyła MSG_LANDING_REFUSED
		Jeśli MSG_TAKE_OFF, to:
			Jeśli wolny pas:
				blokuje pas startowy
				odsyła MSG_TAKE_OFF_PERMIT
			Jeśli nie:
				odsyła MSG_TAKE_OFF_REFUSED
		Jeśli MSG_LANDING_FINISHED, to:
			odblokowuje pas startowy
			dodaje id samolotu do tablicy miejsc zajętych
		Jeśli MSG_TAKE_OFF_FINISHED, to:
			odblokowuje pas startowy
			usuwa id samolotu z tablicy miejsc zajętych
			
Slave-samolot:
	zmienna stan (na lotniskowcu / w powietrzu)
	tablica lotniskowców
	
	Jeśli w powietrzu:
		wykonuje sekcję lokalną (np. patrol zajmujący rand()% 10 sekund)
		Dla każdego lotniskowca w tablicy (pojedynczo):
			wysyła MSG_LANDING
			nasłuchuje na odpowiedź:
				Jeśli MSG_LANDING_PERMIT:
					wykonuje procedurę landing() (np. sleep(rand()%3)
					zmienia stan na 'na lotniskowcu'
					odsyła wiadomość MSG_LANDING_FINISHED
					wychodzi z pętli
				Jeśli MSG_LANDING_REFUSED albo time_out:
					continue
		Jeśli jest w powietrzu (co oznacza, że otrzymał MSG_LANDING_REFUSED albo time_out od wszystkich lotniskowców):
			!! TO DO !! tutaj implementacja jakiejś sensownej kolejki FIFO, może poprzez stworzenie grupy LANDING_QUEUE?
			!! wtedy też konieczna modyfikacja, by po wykonaniu sekcji lokalnej sprawdził, czy istnieje już kolejka, jeśli tak, to od razu dołącza, a nie próbuje lądować
	Jeśli na lotniskowcu:
		wykonuje sekcję lokalną (np. tankowanie, mycie itd. zajmujące rand()% 4 sekundy
		wysyła do swojego lotniskowca MSG_TAKE_OFF
		!! TO DO !! zależnie od implementacji kolejki czy innego rozwiązania przy lądowaniu, tutaj też by wypadało jakoś zapewnić, że nie będzie deadlocka, najlepiej z wyższym
		!! priorytetem niż lądowanie (bo zwolnienie miejsca na lotniskowcu jest cenniejsze niż zajęcie go)
		w pętli ciągłej:
			oczekuje na odpowiedź
			Jeśli MSG_TAKE_OFF_PERMIT:
				wykonuje procedurę take_off (np. sleep(rand()%2))
				zmienia stan na (w powietrzu)
				odsyła wiadomość MSG_TAKE_OFF_FINISHED
				wychodzi z pętli
			Jeśli MSG_TAKE_OFF_REFUSED:
			!! TO DO !! tutaj tak jak wyżej, zrobić to na sensowne
				odczekuje rand() % temp czasu
				ponownie wysyła MSG_TAKE_OFF